@cpp(src="ext-cpp/my_helper.cpp,ext-cpp/scheduler_basic.cpp,ext-cpp/trace_helper.cpp",include="my_helper.hpp,scheduler_basic.hpp,trace_helper.hpp")
package sched
	// Constants definition
	const data int TASK_BUFFER_LIMIT = 255
	const data int NO_TASK = 255
	const data int MAX_TASK_EXECUTION_STEP = 10
	const data int ENABLE = 1
	const data int DISABLE = 0
	const data int UNDEFINED = -1
	// Handler TYPE TaskHandler(TH):0, EventHandler(EH):1
	const data int TYPE_TH = 0
	const data int TYPE_EH = 1
	const data int TYPE_CH = 2

	// helper function definition
	extern function printf(string)
	extern function printf(string, int)
	extern function printf(string, int, int)
	extern function printf(string, string, int)
	extern function printf(string, int, int, int)
	// to get unique tID
	extern function int get_rand(int)
	extern function init_seed()
	// task queue in ScheulerBasicP.nc
	extern function scheuler_init()
	extern function int push_task(int id)
	extern function int pop_task()
	extern function int get_task_count()
	// event stack 
	extern function push(int)
	extern function int pop()
	extern function bool stack_is_empty()
	extern function bool is_full()
	extern function int get_size()
	extern function create_stack(int)
	extern function destroy_stack()
	// trace
	extern function trace_i(string, int)
	
	// Port dinfinition
	port type Port_t()
	port type Port_tv(int v)
	port type Port_tr (string msg)
	port type Port_tvv(int v1, int v2)
	port type Port_tv3(int v1, int v2, int v3)
	port type Port_tv4(int v1, int v2, int v3, int v4)
	port type Port_tta (int tid, int appid)
	
	// connectors 
	// basic 2-ports connector: rendz
	connector type Conn2(Port_t p1, Port_t p2)
		define p1 p2	
	end

	connector type Conn3(Port_tv p1, Port_t p2, Port_t p3)
		define p1 p2 p3
	end
	
	connector type Conn4_Sen_Begin (Port_t a_s, Port_t c_b, Port_tvv s_r, Port_tvv e_r)
		define a_s c_b s_r e_r
		on a_s c_b s_r e_r
		provided (e_r.v1 != UNDEFINED && e_r.v2 != UNDEFINED)
		down {
			s_r.v1 = e_r.v1;
			s_r.v2 = e_r.v2;
		}
	end

	connector type Conn2_V2(Port_tv p1, Port_tv p2)
		define p1 p2	// sen env
		on p1 p2
		provided (p2.v != UNDEFINED)
		down {
			p1.v = p2.v;
		}
	end

	// for task to finish
	connector type Conn2_Finish(Port_tta p1, Port_t p2)
		define p1 p2	
		on p1 p2
		provided(p1.tid != 0 && p1.appid != 0)
	end
	
	connector type Conn2_Finish_1(Port_tv p1, Port_t p2)
		define p1 p2	
		on p1 p2
		provided(p1.v != 0)
	end

	// for event beginning
	connector type Conn2_Begin(Port_t p1, Port_t p2)
		define p1 p2
	end

	// test: for 2-TH only , act like a boradcast
	connector type Conn2_Preem(Port_t es, Port_tta p1)
		define es' p1
		on es down {
			// no task is running ,just do the event
			printf(">>>>>> [Conn2_Preem] no task now, on p1 down\n");
		}
		on es p1 down {
			// stack the tids which are preempted
			push(p1.tid);
			printf(">>>>>>  [Conn2_Preem] preempted tasks is stacked, they are %d\n", p1.tid);
		}
	end

	// test: for 4-TH/CH only , act like a boradcast
	connector type Conn6_Preem(Port_t es, Port_tta p1, Port_tta p2, Port_tta p3, Port_tta p4, Port_tta p5)
		define es' p1 p2 p3 p4 p5
		
		on es  p1                  down {
			push(p1.tid);
			printf(">>>>>>  [Conn4_Preem] preempted tasks is stacked, %d\n", p1.tid);
		}
		on es     p2               down {
			push(p2.tid);
			printf(">>>>>>  [Conn4_Preem] preempted tasks is stacked, %d\n", p2.tid);
		}
		on es           p3         down {
			push(p3.tid);
			printf(">>>>>>  [Conn4_Preem] preempted tasks is stacked, %d\n", p3.tid);
		}
		on es               p4     down {
			push(p4.tid);
			printf(">>>>>>  [Conn4_Preem] preempted tasks is stacked, %d\n", p4.tid);
		}
		on es                   p5 down {
			push(p5.tid);
			printf(">>>>>>  [Conn4_Preem] preempted tasks is stacked, %d\n", p5.tid);
		}
		on es                        down {
			// no task is running ,just do the event
			printf(">>>>>> [Conn4_Preem] no task now, on es down\n");
		}
	end

	// post
	connector type Conn3_P(Port_tv app ,Port_tta ts, Port_tta th_bound)	
		define app ts th_bound
		on app ts th_bound
		provided (th_bound.tid == 0)
		down {
			th_bound.tid = get_rand(255); 
			th_bound.appid = app.v;
			ts.tid = th_bound.tid;
			ts.appid = app.v;	
		}
	end

	connector type Conn3_Timer_Sig(Port_t timer, Port_tv es, Port_tv3 eh)
		define timer es eh
		on timer es eh
		provided (eh.v1 == 0)
		down {
			eh.v1 = get_rand(255); 
			eh.v2 = -2;
			eh.v3 = -2;
			es.v = eh.v1;	
		}
	end

	// signal
	connector type Conn4_S(Port_tv3 sen ,Port_tv es, Port_tv3 eh, Port_t ch_done)
		define sen es eh ch_done
		on sen es eh ch_done
		provided (eh.v1 == 0)
		down {
			eh.v1 = get_rand(255); 
			eh.v2 = sen.v2;
			eh.v3 = sen.v3;
			sen.v1 = eh.v1;
			es.v = eh.v1;	
		}
	end

	// atom: Model of Task Schduler
	atom type TaskScheduler()
   		 // variable definition
    		data int task_count = 0
		data int ptv = UNDEFINED
		data int appid = UNDEFINED
		data int tid = UNDEFINED
		data int temp =UNDEFINED
		data int flag_is_running = DISABLE
		data int flag_is_es_free = UNDEFINED
		
   		 // port instance define
   		export port Port_t beg()
  		export port Port_t fin()
    		export port Port_tta post(tid, appid)	
		export port Port_tv tick(flag_is_es_free) // spinning	

    		// place define
    		place FREE, BUSY

    		initial to FREE do {
			// initial of task queue
			scheuler_init(); 
        			printf("[TS] initial to FREE\n");
    		}

   		on beg from FREE to BUSY
		provided (task_count != 0 && flag_is_running == DISABLE)	
 		do {	
			flag_is_running = ENABLE;
			pop_task();
			task_count = get_task_count();
			printf("[TS] on beg from FREE to BUSY tc:%d\n", task_count);
		}

    		on post from FREE to FREE 
		provided (task_count < TASK_BUFFER_LIMIT)
		do{
			temp = push_task(tid);
			// add to queue
			if (tid != UNDEFINED && temp == ENABLE) 
			then 
				task_count = get_task_count();
				printf("[TS] on post from FREE to FREE, new tid:------%d, tc:%d\n", tid, task_count);
			else 
				printf("[USER_DEFINE_ERROR] push failed: %d, errno: %d\n", tid, temp);
			fi
			temp = UNDEFINED;
		}

    		on post from BUSY to BUSY 
		provided (task_count < TASK_BUFFER_LIMIT)
		do{
			temp = push_task(tid);
			// add to queue
			if (tid != UNDEFINED && temp == ENABLE) 
			then 
				task_count = get_task_count();
				printf("[TS] on post from BUSY to BUSY tc:%d\n", task_count);
			else 
				printf("[USER_DEFINE_ERROR] push failed: %d, errno: %d\n", tid, temp);
			fi
			temp = UNDEFINED;
		}

    		on fin from BUSY to FREE do {
			flag_is_running = DISABLE;
			ptv = pop_task();
			if(ptv == NO_TASK) 
			then 
				printf("[USER_DEFINE_ERROR] pop failed, NO_TASK\n");
			else 
				task_count = get_task_count();
				printf("------ popped task tid %d\n", ptv);
			fi
			printf("[TS] on fin from BUSY to FREE do tc:%d\n", task_count);
			ptv = UNDEFINED;
			tid = UNDEFINED;
		}	

		on tick from FREE to FREE
		provided (task_count == 0)
		do {
			printf("[TS] TS is free now, spinnig\n");
		}

			// priority definition
		// priority ts_tick_minimal tick < *
	end


	// the Atom Component of Event Scheduler
	atom type EventScheduler()
		// variable difination
		data int e_count = 0
		data int stack_size = 0
		export data int is_es_idle = DISABLE
		data int eid = 0

		// exported port defination
		export port Port_t beg()
		export port Port_t pre()
		export port Port_t fin()
		export port Port_tv sig(eid)
		export port Port_t res()
		export port Port_tv test(is_es_idle)
	
		// state defination
		place IDLE, ACCEPT, PREEMPT, BUSY1, BUSY2

		// behaviour defination
		initial to IDLE do {
			create_stack(255);
			is_es_idle = ENABLE;
			e_count = 0;
			stack_size = 0;
			printf("[ES] initial to IDLE, ec: %d, ss: %d \n", e_count, stack_size);
		}

		// only when ES is IDLE, TS can start a new task
		on test from IDLE to IDLE do {
			is_es_idle = ENABLE;
			printf("[ES] ES is still IDLE now, spinning\n");
		}

		on sig from IDLE to ACCEPT do {
			is_es_idle = DISABLE;
			printf("[ES] on sig from IDLE to ACCEPT, ec: %d, ss: %d\n", e_count, stack_size);
		} 

		on pre from ACCEPT to PREEMPT do {
			stack_size = get_size();
			printf("[ES] on pre from ACCEPT to PREEMPT, ec: %d, ss: %d\n", e_count, stack_size);
		}

		on beg from PREEMPT to BUSY1 do {
			e_count = e_count + 1;
			printf("[ES] on beg from PREEMPT to BUSY1, ec: %d, ss: %d\n", e_count, stack_size);
		}
		
		on fin from BUSY1 to IDLE 
		provided(stack_size == 0)
		do {
			e_count = e_count - 1;
			printf("[ES] on fin from BUSY1 to IDLE, ec: %d, ss: %d\n", e_count, stack_size);
		}
		
		on fin from BUSY1 to BUSY2
		provided(stack_size != 0)
		do {
			pop(); 	// pop from stack
			stack_size = get_size();
			e_count = e_count - 1;
			printf("[ES] on fin from BUSY1 to BUSY2, ec: %d, ss: %d\n", e_count, stack_size);
		}

		on res from BUSY2 to BUSY1
		provided(e_count > 0)
		do {
			printf("[ES] on res from BUSY2 to BUSY1, ec: %d, ss: %d\n", e_count, stack_size);
		}

		on res from BUSY2 to IDLE
		provided(e_count == 0)
		do {
			printf("[ES] on res from BUSY2 to IDLE, ec: %d, ss: %d\n", e_count, stack_size);
		}

		// priority definition, it means when 'sig' interaction comes, 'test' interaction must step back 
		// priority idle_state_change test < sig
		
	end	

	// atom type of Task and Event Handler
	atom type TaskHandler()
		data int exe_step = 0
		data int tid = 0
		data int appid = 0	

		// port definition 
		export port Port_tta init(tid, appid)
		export port Port_t beg()
		export port Port_tta fin(tid, appid)
		export port Port_tta pre(tid, appid)
		export port Port_t res()
		port Port_t exe()

		// state definition
		place IDLE, BOUND, EXE, SUSP, DONE

		// behavior definition
		initial to IDLE do {	
			printf("[TH] initial to IDLE\n");
		}

		on init from IDLE to BOUND do {
			printf("[TH] on init from IDLE to BOUND do , appid: %d, id: %d\n", appid, tid);
		}
		
		on beg from BOUND to EXE do{
			printf("[TH] on begin from IDLE to EXE, id:%d\n", tid);
		} 

		// this is internal
		on exe from EXE to EXE 
		provided(exe_step < MAX_TASK_EXECUTION_STEP)
		do {
			exe_step = exe_step + 1;
			printf("[TH] executing, id:%d, step: %d\n", tid, exe_step);
		}

		on fin from EXE to DONE 
		provided(exe_step == MAX_TASK_EXECUTION_STEP)
		do {
			printf("[TH] on fin from EXE to DONE, id:%d\n", tid);
		}

		on pre from EXE to SUSP do {
			 printf("[TH] on pre from EXE to SUSP, th is premeeted, going to SUSPEND, id:%d\n", tid);
		}

		on res from SUSP to EXE do {
			printf("[TH] on res from SUSP to EXE, id:%d\n", tid);
		}
			
	end

	atom type EventHandler()
		// data definition
		data int exe_step = 0
		data int eid = 0	
		data int state= 0
		data int value = 0
		data int appid = -1

		// port definition 
		export port Port_tv3 init(eid, state, value)
		export port Port_t beg()
		export port Port_tv fin(eid)
		export port Port_tta pre(eid, appid)
		export port Port_t res()
		port Port_t exe()

		// state definition
		place IDLE, BOUND, EXE, SUSP, DONE

		// behavior definition
		initial to IDLE do {
			eid = 0;
			printf("[EH] initial to IDLE\n");
		}

		on init from IDLE to BOUND do {
			printf("[EH] on init from IDLE to BOUND do ,id: %d\n", eid);
			printf("[EH] read from Sensor: state: %d, value: %d\n", state, value);
		}
		
		on beg from BOUND to EXE do{
			printf("[EH] on begin from IDLE to EXE, id:%d\n", eid);
		} 

		// this is internal
		on exe from EXE to EXE 
		provided(exe_step < MAX_TASK_EXECUTION_STEP)
		do {
			exe_step = exe_step + 1;
			printf("[EH] executing, id:%d, step: %d\n", eid, exe_step);
		}

		on fin from EXE to DONE 
		provided(exe_step == MAX_TASK_EXECUTION_STEP)
		do {
			printf("[EH] on fin from EXE to DONE, id:%d\n", eid);
		}

		on pre from EXE to SUSP do {
			 printf("[EH] on pre from EXE to SUSP, th is premeeted, going to SUSPEND, id:%d\n", eid);
		}

		on res from SUSP to EXE do {
			printf("[EH] on res from SUSP to EXE, id:%d\n", eid);
		}
			
	end
	
	// Command Handler is quite differnet from TH and EH, it will return a value indicates it succees or not
	// no scheduler
	atom type CommandHandler(int _cid, int _appid)
		// data definition
		data int cid = UNDEFINED
		data int appid = UNDEFINED
		data int read_state = UNDEFINED
			
		// port definition 
		export port Port_t beg()
		export port Port_tv fin(read_state)
		export port Port_tta pre(cid, appid)
		export port Port_t res()
		export port Port_t done()
		
		// state definition
		place IDLE, EXE, SUSP, DONE

		// behavior definition
		initial to IDLE do {
			cid = _cid;
			appid = _appid;
			read_state = DISABLE;
			printf("[CH] initial to IDLE\n");
		}
		
		on beg from IDLE to EXE do{
			printf("[CH] on begin from IDLE to EXE, cid:%d\n", cid);
		} 

		on fin from EXE to DONE 
		do {
			printf("[CH] on fin from EXE to DONE, cid:%d, >>>[read_state]: %d\n", cid, read_state);
		}

		on pre from EXE to SUSP do {
			printf("[CH] on pre from EXE to SUSP, th is premeeted, going to SUSPEND, cid:%d\n", cid);
		}

		on res from SUSP to EXE do {
			printf("[CH] on res from SUSP to EXE, cid:%d\n", cid);
		}
		
		on done from DONE to DONE
	end
	
	atom type Timer( int timer_id, int expire_in) 
		data int count_down = UNDEFINED
		data int t = 0
		// port definition
		export port Port_t post()
		export port Port_t sig()
		port Port_t tick()
		
		// state definition
		place INIT, EXE
		
		// interaction definition
		initial to INIT do {
			count_down = 0;
			printf("[Timer] timer %d init\n", timer_id);
		}
	
		on post from INIT to EXE 
		provided (count_down == 0)
		do {
			count_down = expire_in;
			printf("[Timer] on post from EXE to EXE, new event set:%d, expire in:%d, timer ID: %d\n", t, expire_in, timer_id);
		}

		on tick from EXE to EXE
		provided (count_down > 0)
		do {
			// todo: real time related?
			printf("[Timer] on tick from EXE to EXE, remain countdown %d/%d", count_down, expire_in);
			count_down = count_down - 1;
		}
		
		on sig from EXE to INIT
		provided (count_down == 0)
		do {
			printf("[Timer] on sig from EXE to INIT,  event: %d, expire in %d\n, timer ID: %d", t, expire_in, timer_id);
		}

		priority myPrio1 * < tick provided(count_down > 0)
	end

	atom type Sensor(int _sid)		
		// data definition
		data int sid = UNDEFINED
		data int is_idle = UNDEFINED
		data int read_value = UNDEFINED
		data int read_state = UNDEFINED

		// port definition
		export port Port_tv3 sig(sid, read_state, read_value)
		export port Port_tvv read(read_state, read_value)	
		export port Port_tv test(is_idle)
	
		// state definition
		place EXE1, EXE2

		initial to EXE1 do {
			sid = _sid;
			is_idle = ENABLE;
			read_value = DISABLE;
			read_state = DISABLE;
			printf("[Sensor] sensor sid: %d\n", sid);
		}

		on read from EXE1 to EXE2 do{
			is_idle = ENABLE;
			printf("[Sensor] on beg from EXE1 to EXE2, sid: %d\n", sid);
		}

		on sig from EXE2 to EXE1 do {	
			is_idle = DISABLE;
			printf("[Sensor] on sig from EXE2 to EXE1, sid: %d\n", sid);
		}

		on test from EXE1 to EXE1
		
		on test from EXE2 to EXE2
	end

	// user defined software component
	atom type UserApplication(int _appid, int task_count, int signal_count)
		
		data int posted_task_count = 0
		data int signaled_count = 0
		data int appid = 0
		
		// port definition
		export port Port_tv post(appid)
		export port Port_t sig()
		port Port_t start()
		port Port_t ret()
		port Port_t fin()
		
		place INIT, POSTING, RUNNING, FIN

		initial to INIT do {
			init_seed();
			appid = _appid;
			printf("[UA] APP %d init\n", appid);
		} 
		
		on start from INIT to RUNNING do {
			printf("[UA] APP %d begins running\n", appid);
		}

		on post from RUNNING to POSTING 
		provided(posted_task_count < task_count)
		do {
			posted_task_count  = posted_task_count + 1;
			printf("[UA] APP %d posting a task\n", appid);	
		}

		on sig from RUNNING to RUNNING 
		provided (signaled_count < signal_count) 
		do {
			signaled_count = signaled_count + 1;
			printf("[UA] APP %d signal a event\n", appid);
		}
		
		on ret from POSTING to RUNNING do {
			printf("[UA] APP %d continue to run\n", appid); 
		}

		on fin from RUNNING to FIN 
		provided(posted_task_count == task_count && signaled_count == signal_count)
		do {
			printf("[UA] APP %d is done\n", appid);
		}	
		
	end

	atom type RadioSender(int id)
		// data definition
		data string packet = " "
		// port definition
		export port Port_t sig()
		export port Port_t broadcast()
		export port Port_tr syn_send(packet)
		// place definition
		place IDLE, SEND, FIN

		// interaction definition
		initial to IDLE
		
		on syn_send from IDLE to SEND

		on broadcast from SEND to FIN

		on sig from FIN to IDLE

	end
	
	atom type RadioReceiver(int id)
		// data dedinition
		data string packet = " "
		// port definition
		export port Port_tr listen(packet)
		export port Port_t  sig()
		// place definition
		place IDLE, RECV
		
		// interaction definition
		initial to IDLE

		on listen from IDLE to RECV

		on sig from RECV to IDLE
		
	end

	// for Sensor, it will provide a random value as the return of sensors
	atom type Environment() 
		// data definition
		data int value
		data int state
		// port definition
		export port Port_tvv read(state, value)
		// state definition
		place DO
		// interaction definition
		initial to DO do {
			value = get_rand(10000);
			// 10% fail
			if (value > 9000) then
				state = DISABLE;
			else
				state = ENABLE;
			fi
		}
			
		on read from DO to DO do {
			value = get_rand(10000);
			// 10% fail
			if (value > 9000) then
				state = DISABLE;
			else
				state = ENABLE;
			fi
		}
	end

	// main
	compound  type  Compound() 
		// components
    		component TaskScheduler ts()
		component EventScheduler es()

		// component Timer timer1(111)
		component Sensor sen1(456)	
		component Timer timer1(6324, 3)	
		component UserApplication app1(1, 2, 2)

		component TaskHandler th_app1_1(), th_app1_2()
		component EventHandler eh_sen1_data_ready(), eh_timer()
		component CommandHandler ch_sen1_get_data(7777, 7777)

		component Environment env() 

		// connectors
		// post task
		connector Conn3_P post_task1(app1.post, ts.post, th_app1_1.init)
		connector Conn3_P post_task2(app1.post, ts.post, th_app1_2.init)
		// the link of tasksched and its handler: begin
		connector Conn3 begin_task1(es.test, th_app1_1.beg, ts.beg)					
		connector Conn3 begin_task2(es.test, th_app1_2.beg, ts.beg)
	
		// the link of tasksched and its handler: finish
		connector Conn2_Finish fin_task1(th_app1_1.fin, ts.fin)
		connector Conn2_Finish fin_task2(th_app1_2.fin, ts.fin)	
		
		// the following is for test: meet the basic demanding
		connector Conn6_Preem test_pree1(es.pre, 
							th_app1_1.pre, 
							th_app1_2.pre, 
							ch_sen1_get_data.pre, 
							eh_sen1_data_ready.pre, 
							eh_timer.pre)
		
		connector Conn2 test_res1(es.res, th_app1_1.res)
		connector Conn2 test_res2(es.res, th_app1_2.res)
		connector Conn2 test_res3(es.res, ch_sen1_get_data.res)
		connector Conn2 test_res4(es.res, eh_sen1_data_ready.res)
		connector Conn2 test_res5(es.res, eh_timer.res)

		// Command handler :TempRead.read() == SUCCESS
		connector Conn4_Sen_Begin sen_ch_beg(app1.sig, ch_sen1_get_data.beg, sen1.read, env.read)	
		connector Conn2_V2  sen_repo(ch_sen1_get_data.fin, sen1.test)
		
		// Sensor sig, it will sig anytime
		connector Conn4_S            sig_event1(sen1.sig, es.sig, eh_sen1_data_ready.init, ch_sen1_get_data.done)
		connector Conn2_Begin     begin_event1(eh_sen1_data_ready.beg, es.beg)
		connector Conn2_Finish_1  fin_event1(eh_sen1_data_ready.fin, es.fin)

		// Timer sig, it will sig when expired
		connector Conn2                  set_timer1(app1.sig, timer1.post)
		connector Conn3_Timer_Sig  sig_timer1(timer1.sig, es.sig, eh_timer.init)
		connector Conn2_Begin        beg_timer1(eh_timer.beg, es.beg)
		connector Conn2_Finish_1     fin_timer1(eh_timer.fin, es.fin)

		// extern connector 
		// make sure tick excute after ts and es is free
		connector Conn2_V2 ts_es_free(ts.tick, es.test)
		priority ts_tick_minimal1 ts_es_free: * < * : * provided (es.is_es_idle == 0)
	end
end