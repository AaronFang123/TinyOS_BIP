@cpp(src="ext-cpp/my_helper.cpp,ext-cpp/scheduler_basic.cpp,ext-cpp/trace_helper.cpp",include="my_helper.hpp,scheduler_basic.hpp,trace_helper.hpp")
package sched
	// Constants definition
	const data int TASK_BUFFER_LIMIT = 255
	const data int NO_TASK = 255
	const data int MAX_TASK_EXECUTION_STEP = 5
	const data int UNDEFINED = -1
	const data int ENABLE = 1
	const data int DISABLE = 0

	// transported msg
	extern data type message_t
	extern function set_message_t(int, message_t)
	extern function print_message_t(message_t)
	// helper function definition
	extern function printf(string)
	extern function printf(string, int)
	extern function printf(string, int, int)
	extern function printf(string, int, int, int)
	// to get unique tID/eID
	extern function int get_rand(int)
	extern function init_seed()
	// task queue in ScheulerBasicP.nc
	extern function scheuler_init(int)
	extern function int push_task(int, int)
	extern function int pop_task(int)
	extern function int get_task_count(int)
	// event stack 
	extern function push(int, int)
	extern function int pop(int)
	extern function bool stack_is_empty(int)
	extern function bool is_full(int)
	extern function int get_size(int)
	extern function create_stack(int, int)
	// trace
	extern function trace_i(string, int)
	
	// Port dinfinition
	port type Port_t()
	port type Port_tv(int v)
	port type Port_tm(message_t msg)
	port type Port_tvm(int v, message_t msg)
	port type Port_tvv(int v1, int v2)
	port type Port_tv3(int v1, int v2, int v3)
	port type Port_tv4(int v1, int v2, int v3, int v4)
	port type Port_tta (int tid, int appid) // for pre and res only
	
	// connectors 
	// basic 2-ports connector: rendz
	connector type Conn2(Port_t p1, Port_t p2)
		define p1 p2	
	end

	connector type Conn3_Basic (Port_t p1, Port_t p2, Port_t p3) 
		define p1 p2 p3
	end	

	connector type Conn3(Port_tv p1, Port_t p2, Port_t p3)
		define p1 p2 p3
	end
	
	connector type Conn4_Sen_Begin (Port_t appsig, Port_t combeg, Port_tvv s_r, Port_tvv envread)
		define appsig combeg s_r envread
		on appsig combeg s_r envread
		provided (envread.v1 != UNDEFINED && envread.v2 != UNDEFINED)
		down {
			s_r.v1 = envread.v1;
			s_r.v2 = envread.v2;
		}
	end

	connector type Conn2_V2(Port_tv p1, Port_tv p2)
		define p1 p2	// sen env
		on p1 p2
		down { p1.v = p2.v; }
	end

	// for task to finish
	connector type Conn2_Finish(Port_tta p1, Port_t p2)
		define p1 p2	
		on p1 p2
		provided(p1.tid != 0 && p1.appid != 0)
	end
	
	connector type Conn2_Finish_1(Port_tv p1, Port_t p2)
		define p1 p2	
	end

	// test: for 4-TH/CH only , act like a boradcast
	connector type Conn6_Preem(Port_t es, Port_tta p1, Port_tta p2, Port_tta p3, Port_tta p4, Port_tta p5)
		define es' p1 p2 p3 p4 p5
		on es                        down {
			printf("                [Conn4_Preem] no task is preemted, go on \n");
		}
		on es  p1                  down {
			push(p1.appid, p1.tid);
			printf("                [Conn4_Preem] preempted tasks is stacked, %d\n", p1.tid);
		}
		on es     p2               down {
			push(p2.appid, p2.tid);
			printf("                [Conn4_Preem] preempted tasks is stacked, %d\n", p2.tid);
		}
		on es           p3         down {
			push(p3.appid, p3.tid);
			printf("                [Conn4_Preem] preempted tasks is stacked, %d\n", p3.tid);
		}
		on es               p4     down {
			push(p4.appid, p4.tid);
			printf("                [Conn4_Preem] preempted tasks is stacked, %d\n", p4.tid);
		}
		on es                   p5 down {
			push(p5.appid, p5.tid);
			printf("                [Conn4_Preem] preempted tasks is stacked, %d\n", p5.tid);
		}
	end

	// post
	connector type Conn3_P(Port_tv app ,Port_tta ts, Port_tta th_bound)	
		define app ts th_bound
		on app ts th_bound
		provided (th_bound.tid == 0)
		down {
			th_bound.tid = get_rand(255); 
			th_bound.appid = app.v;
			ts.tid = th_bound.tid;
			ts.appid = app.v;	
		}
	end

	connector type Conn3_Timer_Sig(Port_t timer, Port_tv es, Port_tv3 eh)
		define timer es eh
		on timer es eh
		down {
			eh.v1 = get_rand(255); 
			eh.v2 = -2;
			eh.v3 = -2;
			es.v = eh.v1;	
		}
	end

	// signal
	connector type Conn4_S(Port_tv3 sen ,Port_tv es, Port_tv3 eh, Port_t ch_done)
		define sen es eh ch_done
		on sen es eh ch_done
		provided (eh.v1 == 0)
		down {
			eh.v1 = get_rand(255); 
			eh.v2 = sen.v2;
			eh.v3 = sen.v3;
			sen.v1 = eh.v1;
			es.v = eh.v1;	
		}
	end


	connector type Conn_Sen_Ch_Beg (Port_t appsig, Port_t chbeg, Port_t led, Port_tvv senread, Port_tvv envread)
		define appsig chbeg led senread envread
		on appsig chbeg led senread envread
		down {
			senread.v1 = envread.v1;
			senread.v2 = envread.v2;
		}
	end

	connector type Conn3_Datamsg_Senddone(Port_tvv ehinit, Port_tv sndsig, Port_tv essig)
		define ehinit sndsig essig 
		on ehinit sndsig essig
		down {
			ehinit.v1 = get_rand(255);
			ehinit.v2 = sndsig.v;
			essig.v = ehinit.v1;
		}
	end

	connector type Conn_Sig_Photo_Read (Port_tv3 sensig, Port_tv essig,  Port_tv3 ehinit, Port_t chsig)
		define sensig essig ehinit chsig
		on sensig essig ehinit chsig
		down {
			ehinit.v1 = get_rand(255);
			ehinit.v2 = sensig.v2;
			ehinit.v3 = sensig.v3;
			essig.v = ehinit.v1;
		}
	end

	connector type Conn_Data_Receive(Port_tv essig, Port_tm rcvlis, Port_tvm ehinit)
		define essig rcvlis ehinit
		on essig rcvlis ehinit
		down {
			ehinit.v = get_rand(255);
			ehinit.msg = rcvlis.msg;
			essig.v = ehinit.v;
		}
	end

	connector type Conn3_Radio_Senddone(Port_tv p1, Port_tv p2, Port_t p3)
		define p1 p2 p3
		on p1 p2 p3
		down { p1.v = p2.v; }
	end

	// pass p1's value(message_t) to p2
	connector type Conn2_M(Port_tm p1, Port_tm p2)
		define p1 p2
		on p1 p2
		down { p2.msg = p1.msg; }
	end

	connector type Conn_CSMACA(Port_tm snd, Port_tv chan, Port_tm rcv) 
		define snd chan rcv
		on snd chan rcv
		// provided (get_rand(100) < chan.v) // success rate
		down { rcv.msg = snd.msg; }
	end  

	// atom: Model of Task Schduler
	atom type TaskScheduler(int did, int enable)
   		 // variable definition
    		data int task_count = 0
		data int ptv = UNDEFINED
		data int appid = UNDEFINED
		data int tid = UNDEFINED
		data int temp =UNDEFINED
		data int flag_is_running = DISABLE
		data int flag_is_es_free = UNDEFINED
		
   		 // port instance define
		export port Port_t init()
   		export port Port_t beg()
  		export port Port_t fin()
    		export port Port_tta post(tid, appid)	
		export port Port_tv tick(flag_is_es_free) // spinning	

    		// place define
    		place BOOT, FREE, BUSY

		initial to BOOT
		
		on init from BOOT to FREE do {
			// initial of task queue
			scheuler_init(did); 
		}

   		on beg from FREE to BUSY provided (task_count != 0 && flag_is_running == DISABLE && enable == ENABLE)	
 		do {	
			flag_is_running = ENABLE;
			pop_task(did);
			task_count = get_task_count(did);
			printf("                [TS] on beg from FREE to BUSY tc:%d\n", task_count);
		}

    		on post from FREE to FREE provided (task_count < TASK_BUFFER_LIMIT && enable == ENABLE)
		do{
			temp = push_task(did, tid);
			// add to queue
			if (tid != UNDEFINED && temp == ENABLE) 
			then 
				task_count = get_task_count(did);
				printf("                [TS] on post from FREE to FREE, new tid: %d, tc:%d\n", tid, task_count);
			else 
				printf("                [USER_DEFINE_ERROR] push failed: %d, errno: %d\n", tid, temp);
			fi
			temp = UNDEFINED;
		}

    		on post from BUSY to BUSY provided (task_count < TASK_BUFFER_LIMIT)
		do{
			temp = push_task(did, tid);
			// add to queue
			if (tid != UNDEFINED && temp == ENABLE) 
			then 
				task_count = get_task_count(did);
				printf("                [TS] on post from BUSY to BUSY tc:%d\n", task_count);
			else 
				printf("                [USER_DEFINE_ERROR] push failed: %d, errno: %d\n", tid, temp);
			fi
			temp = UNDEFINED;
		}

    		on fin from BUSY to FREE do {
			flag_is_running = DISABLE;
			ptv = pop_task(did);
			if(ptv == NO_TASK) 
			then 
				printf("                [USER_DEFINE_ERROR] pop failed, NO_TASK\n");
			else 
				task_count = get_task_count(did);
				printf("                [TS]popped task tid %d\n", ptv);
			fi
			printf("                [TS] on fin from BUSY to FREE do tc:%d\n", task_count);
			ptv = UNDEFINED;
			tid = UNDEFINED;
		}	

		on tick from FREE to FREE provided (task_count == 0 && enable == ENABLE)

	end

	// the Atom Component of Event Scheduler
	atom type EventScheduler(int did)
		// variable difination
		data int e_count = 0
		data int stack_size = 0
		export data int is_es_idle = DISABLE
		data int eid = 0
		data int popped_id = -1

		// exported port defination
		export port Port_t init()
		export port Port_t beg()
		export port Port_t pre()
		export port Port_t fin()
		export port Port_tv sig(eid)
		export port Port_t res()
		export port Port_tv test(is_es_idle)
	
		// state defination
		place INIT, IDLE, ACCEPT, PREEMPT, BUSY1, BUSY2
		
		// behaviour defination
		initial to INIT

		on init from INIT to IDLE do {
			create_stack(did, 255);
			is_es_idle = ENABLE;
			e_count = 0;
			stack_size = 0;
			printf("                [ES] initial to IDLE, ec: %d, ss: %d \n", e_count, stack_size);
		}

		// only when ES is IDLE, TS can start a new task
		on test from IDLE to IDLE do {is_es_idle = ENABLE;}

		on sig from IDLE to ACCEPT do {
			is_es_idle = DISABLE;
			printf("                [ES] on sig from IDLE to ACCEPT, ec: %d, ss: %d\n", e_count, stack_size);
		} 

		on pre from ACCEPT to PREEMPT do {
			stack_size = get_size(did);
			printf("                [ES] on pre from ACCEPT to PREEMPT, ec: %d, ss: %d\n", e_count, stack_size);
		}

		on beg from PREEMPT to BUSY1 do {
			e_count = e_count + 1;
			printf("                [ES] on beg from PREEMPT to BUSY1, ec: %d, ss: %d\n", e_count, stack_size);
		}	
		
		on fin from BUSY1 to IDLE provided(stack_size == 0)
		do {
			e_count = e_count - 1;
			printf("                [ES] on fin from BUSY1 to IDLE, ec: %d, ss: %d\n", e_count, stack_size);
		}
		
		on fin from BUSY1 to BUSY2 provided(stack_size != 0)
		do {
			popped_id = pop(did); 	// pop from stack
			stack_size = get_size(did);
			e_count = e_count - 1;
			printf("                [ES] on fin from BUSY1 to BUSY2, ec: %d, ss: %d,  popped id: %d\n", e_count, stack_size, popped_id);
		}

		on res from BUSY2 to BUSY1 provided(e_count > 0)
		do {
			printf("                [ES] on res from BUSY2 to BUSY1, ec: %d, ss: %d\n", e_count, stack_size);
		}

		on res from BUSY2 to IDLE provided(e_count == 0)
		do {
			printf("                [ES] on res from BUSY2 to IDLE, ec: %d, ss: %d\n", e_count, stack_size);
		}
	end	

	// atom type of Task and Event Handler
	atom type TaskHandler()
		data int exe_step = 0
		data int tid = 0
		data int appid = 0	

		// port definition 
		export port Port_tta init(tid, appid)
		export port Port_t beg()
		export port Port_tta fin(tid, appid)
		export port Port_tta pre(tid, appid)
		export port Port_t res()
		port Port_t exe()

		// state definition
		place IDLE, BOUND, EXE, SUSP, DONE

		// behavior definition
		initial to IDLE

		on init from IDLE to BOUND do {
			printf("                [TH] on init from IDLE to BOUND do , appid: %d, id: %d\n", appid, tid);
		}
		
		on beg from BOUND to EXE do{
			printf("                [TH] on begin from IDLE to EXE, id:%d\n", tid);
		} 

		// this is internal
		on exe from EXE to EXE provided(exe_step < MAX_TASK_EXECUTION_STEP)
		do {
			exe_step = exe_step + 1;
			printf("                [TH] executing, id:%d, step: %d\n", tid, exe_step);
		}

		on fin from EXE to DONE provided(exe_step == MAX_TASK_EXECUTION_STEP)
		do {
			printf("                [TH] on fin from EXE to DONE, id:%d\n", tid);
		}

		on pre from EXE to SUSP do {
			 printf("                [TH] on pre from EXE to SUSP, th is premeeted, going to SUSPEND, id:%d\n", tid);
		}

		on res from SUSP to EXE do {
			printf("                [TH] on res from SUSP to EXE, id:%d\n", tid);
		}
			
	end

	atom type EventHandler()
		// data definition
		data int exe_step = 0
		data int eid = 0	
		data int state= 0
		data int value = 0
		data int appid = -1

		// port definition 
		export port Port_tv3 init(eid, state, value)
		export port Port_t beg()
		export port Port_tv fin(eid)
		export port Port_tta pre(eid, appid)
		export port Port_t res()
		port Port_t exe()

		// state definition
		place IDLE, BOUND, EXE, SUSP

		// behavior definition
		initial to IDLE

		on init from IDLE to BOUND do {
			printf("                [EH] on init from IDLE to BOUND do ,id: %d\n", eid);
			printf("                [EH] read value: state: %d, value: %d\n", state, value);
		}
		
		on beg from BOUND to EXE do{
			printf("                [EH] on begin from IDLE to EXE, id:%d\n", eid);
		} 

		// this is internal
		on exe from EXE to EXE provided(exe_step < MAX_TASK_EXECUTION_STEP)
		do {
			exe_step = exe_step + 1;
			printf("                [EH] executing, id:%d, step: %d\n", eid, exe_step);
		}

		on fin from EXE to IDLE provided(exe_step == MAX_TASK_EXECUTION_STEP)
		do {
			exe_step = 0;
			eid = 0;
			state= 0;
			value = 0;
			appid = -1;
			printf("                [EH] on fin from EXE to IDLE, id:%d\n", eid);
		}

		on pre from EXE to SUSP do {
			 printf("                [EH] on pre from EXE to SUSP, th is premeeted, going to SUSPEND, id:%d\n", eid);
		}

		on res from SUSP to EXE do {
			printf("                [EH] on res from SUSP to EXE, id:%d\n", eid);
		}
			
	end

	// each time period the EH_Timer may execute once
	atom type EH_Timer(int _appid)
		// data definition
		data int eid = UNDEFINED
		data int appid = UNDEFINED

		// port definition 
		export port Port_tv init(eid)
		export port Port_t beg()
		export port Port_tta pre(eid, appid)
		export port Port_t res()
		export port Port_tv call(eid)

		// state definition
		place IDLE, BOUND, EXE, SUSP

		// behavior definition
		initial to IDLE do { appid = _appid; }

		on init from IDLE to BOUND 
		
		on beg from BOUND to EXE 

		// 1. call Leds.led1Toggle()
		// 2. call Photo.read()
		on call from EXE to IDLE 

		on pre from EXE to SUSP 

		on res from SUSP to EXE 
			
	end

	atom type CH_Photo_Read(int _cid, int _appid)
		data int appid = UNDEFINED
		data int cid = UNDEFINED
		// port definition 
		export port Port_t beg()
		export port Port_tta pre(cid, appid)
		export port Port_t res()
		export port Port_t sig()
		
		// state definition
		place IDLE, EXE, SUSP

		// behavior definition
		initial to IDLE do { 
			appid = _appid;
			cid = _cid;
		}
		
		on beg from IDLE to EXE

		on sig from EXE to IDLE 

		on pre from EXE to SUSP 

		on res from SUSP to EXE 
	end

	atom type EH_Photo_ReadDone(int _appid)
		// data definition
		data int eid = UNDEFINED	
		data int result = UNDEFINED
		data int value = UNDEFINED
		data int flag_last_estate = UNDEFINED
		data int flag_send = UNDEFINED
		data int appid = UNDEFINED
		data message_t msg

		// port definition 
		export port Port_tv3 init(eid, result, value)
		export port Port_t beg()
		export port Port_tta pre(eid, appid)
		export port Port_t res()
		export port Port_tm call_send(msg)
		export port Port_tv get_report(flag_send)
		export port Port_t call_led2()

		// state definition
		place IDLE, BOUND, E1, E2, E3, SUSP

		// behavior definition
		initial to IDLE do { 
			appid = _appid; 
			// initialize message
			set_message_t(-1,  msg);
		}

		on init from IDLE to BOUND 
		
		on beg from BOUND to E1 provided (result == ENABLE)
		do { 
			set_message_t(value, msg);
			print_message_t(msg);
		}
		// set data to send

		// send data
		on call_send from E1 to E2

		on get_report from E2 to E3

		on call_led2 from E3 to IDLE provided(flag_send == ENABLE)

		on pre from E1 to SUSP do {flag_last_estate = 1;}
		on pre from E2 to SUSP do {flag_last_estate = 2;}
		on pre from E3 to SUSP do {flag_last_estate = 3;}

		on res from SUSP to E1 provided(flag_last_estate == 1)
		on res from SUSP to E2 provided(flag_last_estate == 2)
		on res from SUSP to E3 provided(flag_last_estate == 3)
	end

	atom type CH_DataMsg_Send(int _cid, int _appid)
		// data definition
		data int read_state = UNDEFINED
		data int flag_last_e = UNDEFINED
		data int appid = UNDEFINED
		data int cid = UNDEFINED
		data message_t msg		

		// port definition 
		export port Port_tm beg(msg)
		export port Port_tta pre(cid, appid)
		export port Port_t res()
		export port Port_t sig()
		export port Port_tm send(msg)
		
		// state definition
		place IDLE, E1, E2, SUSP

		// behavior definition
		initial to IDLE do { 
			appid = _appid; 
			cid = _cid;
		}
		
		on beg from IDLE to E1

		on send from E1 to E2
		
		on sig from E2 to IDLE 

		on pre from E1 to SUSP do {flag_last_e = 1;}
		on pre from E2 to SUSP do {flag_last_e = 2;}

		on res from SUSP to E1 provided(flag_last_e == 1)  
		on res from SUSP to E2 provided(flag_last_e == 2)  
	end
	
	atom type EH_DataMsg_SendDone(int _appid)
		// data definition
		data int eid = UNDEFINED	
		data int flag_error = UNDEFINED
		data int appid = UNDEFINED
		
		// port definition 
		export port Port_tvv init(eid, flag_error)
		export port Port_t beg()
		export port Port_tta pre(eid, appid)
		export port Port_t res()
		export port Port_t call()

		// state definition
		place IDLE, BOUND, EXE, SUSP

		// behavior definition
		initial to IDLE do { appid = _appid; }

		on init from IDLE to BOUND 
		
		on beg from BOUND to EXE provided (flag_error == ENABLE)
		// set data to send
		on call from EXE to IDLE
 
		on pre from EXE to SUSP 
		on res from SUSP to EXE 

	end

	atom type EH_Recvmsg_Receive(int _appid)
		// data definition
		data int eid = UNDEFINED
		data int appid = UNDEFINED
		data message_t payload

		// port definition 
		export port Port_tvm init(eid, payload)
		export port Port_t beg()
		export port Port_tta pre(eid, appid)
		export port Port_t res()
		export port Port_t call()

		// state definition
		place IDLE, BOUND, EXE, SUSP

		// behavior definition
		initial to IDLE do { appid = _appid; }

		on init from IDLE to BOUND 

		on beg from BOUND to EXE
		
		on call from EXE to IDLE do { print_message_t(payload); }
		// set data to send

		on pre from EXE to SUSP 
		on res from SUSP to EXE 

	end

	// Command Handler is quite differnet from TH and EH, it will return a value indicates it succees or not
	// no scheduler related
	atom type CommandHandler(int _cid, int _appid)
		// data definition
		data int cid = UNDEFINED
		data int appid = UNDEFINED
		data int read_state = UNDEFINED
			
		// port definition 
		export port Port_t beg()
		export port Port_tv fin(read_state)
		export port Port_tta pre(cid, appid)
		export port Port_t res()
		export port Port_t done()
		
		// state definition
		place IDLE, EXE, SUSP, DONE

		// behavior definition
		initial to IDLE do {
			cid = _cid;
			appid = _appid;
			read_state = DISABLE;
		}
		
		on beg from IDLE to EXE do{
			printf("                [CH] on begin from IDLE to EXE, cid:%d\n", cid);
		} 

		on fin from EXE to DONE 
		do {
			printf("                [CH] on fin from EXE to DONE, cid:%d, >>>[read_state]: %d\n", cid, read_state);
		}

		on pre from EXE to SUSP do {
			printf("                [CH] on pre from EXE to SUSP, th is premeeted, going to SUSPEND, cid:%d\n", cid);
		}

		on res from SUSP to EXE do {
			printf("                [CH] on res from SUSP to EXE, cid:%d\n", cid);
		}
		
		on done from DONE to DONE
	end
	
	atom type Timer( int timer_id, int expire_in, int is_one_shot) 

		data int count_down = UNDEFINED
		data int t = 0
		data int flag_is_posted = DISABLE

		// port definition
		export port Port_t post()
		export port Port_t sig()
		export port Port_t stop()
		export port Port_t interval()
		port Port_t tick()
		
		// state definition
		place INIT, EXE, DONE
		
		// interaction definition
		initial to INIT do { count_down = 0; }
	
		on post from INIT to EXE provided (count_down == 0 && flag_is_posted == DISABLE && is_one_shot == DISABLE)
		do {
			flag_is_posted = ENABLE;
			count_down = expire_in;
			printf("                [Timer] on post from INIT to EXE, new event set:%d, expire in:%d, timer ID: %d\n", t, expire_in, timer_id);
		}

		on interval from INIT to EXE provided (count_down == 0 && flag_is_posted == ENABLE)
		do {
			count_down = expire_in;
			printf("                [Timer] on interval from INIT to EXE, new event set:%d, expire in:%d, timer ID: %d\n", t, expire_in, timer_id);
		}

		on tick from EXE to EXE provided (count_down > 0)
		do {
			// todo: real time related?
			printf("                [Timer] on tick from EXE to EXE, remain countdown %d/%d\n", count_down, expire_in);
			count_down = count_down - 1;
		}
		
		on sig from EXE to INIT provided (count_down == 0 && is_one_shot == DISABLE)
		do {
			printf("                [Timer] on sig from EXE to INIT\n");
			// start a interval 
			count_down = 0;
		}

		on sig from EXE to DONE provided (count_down == 0 && is_one_shot == ENABLE)
		do {
			printf("                [Timer] on sig from DONE to INIT\n");
			// start a interval 
			count_down = 0;
		}


		on stop from EXE to INIT do { count_down = 0; }
	end

	atom type Sensor(int _sid)		
		// data definition
		data int sid = UNDEFINED
		data int is_idle = UNDEFINED
		data int read_value = UNDEFINED
		data int read_state = UNDEFINED

		// port definition
		export port Port_tv3 sig(sid, read_state, read_value)
		export port Port_tvv read(read_state, read_value)	
		export port Port_tv test(is_idle)
	
		// state definition
		place EXE1, EXE2

		initial to EXE1 do {
			sid = _sid;
			is_idle = ENABLE;
			read_value = DISABLE;
			read_state = DISABLE;
		}

		on read from EXE1 to EXE2 do{
			is_idle = ENABLE;
			printf("                [Sensor] on beg from EXE1 to EXE2, sid: %d\n", sid);
		}

		on sig from EXE2 to EXE1 do {	
			is_idle = DISABLE;
			printf("                [Sensor] on sig from EXE2 to EXE1, sid: %d\n", sid);
		}

		on test from EXE1 to EXE1
		
		on test from EXE2 to EXE2
	end

	// Boot sequence of TOS
	atom type NodeBoot() 
		export port Port_t sched_init()
		port Port_t platform_init()
		export port Port_t enable_interrupt()
		export port Port_t booted()
		port Port_t task_loop()
		
		// NE: negative, SI: scheduler init, PI: plattfrom init, IE: interrupt enable, BO: booted, SC: scheduler task loop
		place NE, SI, PI, IE, BO, SC

		initial to NE

		on sched_init from NE to SI do {
			printf("                [TOS_BOOT] 1. scheduler init\n");
		}

		on platform_init from SI to PI do {
			printf("                [TOS_BOOT] 2. platform init\n");
		}

		on enable_interrupt from PI to IE do {
			printf("                [TOS_BOOT] 3. enable interrupt\n");
		}

		on booted from IE to BO do {
			printf("                [TOS_BOOT] 4. booted\n");
		}

		on task_loop from BO to SC do {
			printf("                [TOS_BOOT] 5. task loop begin\n");
		}
	end

	// Demo Application
	atom type SampleApplication(int _appid, int task_count, int signal_count)
		data int posted_task_count = 0
		data int signaled_count = 0
		data int appid = 0
		
		// port definition
		export port Port_tv post(appid)
		export port Port_t sig()
		export port Port_t booted()
		port Port_t start()
		port Port_t fin()
		
		place BOOT, INIT, RUNNING, FIN
	
		initial to BOOT

		on booted from BOOT to INIT do {
			init_seed();
			appid = _appid;
			printf("                [UA] APP %d init\n", appid);
		}

		on start from INIT to RUNNING do {
			printf("                [UA] APP %d begins running\n", appid);
		}

		on post from RUNNING to RUNNING provided(posted_task_count < task_count)
		do {
			posted_task_count  = posted_task_count + 1;
			printf("                [UA] APP %d posting a task\n", appid);	
		}

		on sig from RUNNING to RUNNING provided (signaled_count < signal_count) 
		do {
			signaled_count = signaled_count + 1;
			printf("                [UA] APP %d signal a event\n", appid);
		}

		on fin from RUNNING to FIN provided(posted_task_count == task_count && signaled_count == signal_count)
		do {
			printf("                [UA] APP %d is done\n", appid);
		}	
		
	end

	atom type RadioSender(int id)
		// data definition
		data message_t packet
		data int flag_send_enable = DISABLE
		data int flag_send_succeed = DISABLE // todo

		// port definition
		export port Port_tv sig(flag_send_succeed)
		export port Port_tm broadcast(packet)
		export port Port_tm syn_send(packet)
		export port Port_tv test(flag_send_enable)
		
		// place definition
		place IDLE, SEND, FIN

		// interaction definition
		initial to IDLE do {flag_send_enable = ENABLE;}
		
		on syn_send from IDLE to SEND do {flag_send_enable = DISABLE;}

		on broadcast from SEND to FIN do {flag_send_enable = DISABLE;}

		on sig from FIN to IDLE do {flag_send_enable = ENABLE;}
		
		on test from IDLE to IDLE
		on test from SEND to SEND
		on test from FIN to FIN
		

	end
	
	atom type RadioReceiver(int id)
		// data dedinition
		data message_t packet
		// port definition
		export port Port_tm listen1(packet)
		export port Port_tm listen2(packet)
		export port Port_t sig()
		// place definition
		place IDLE, RECV1, RECV2
		
		// interaction definition
		initial to IDLE

		on listen1 from IDLE to RECV1

		on listen2 from RECV1 to RECV2

		on sig from RECV2 to IDLE
		
	end

	atom type LED()
		data int led0 = 0
		data int led1 = 0
		data int led2 = 0
		
		export port Port_t led0on()
		export port Port_t led1on()
		export port Port_t led2on()

		export port Port_t led0off()
		export port Port_t led1off()
		export port Port_t led2off()
	
		place SET

		initial to SET
		on led0on from SET to SET do {led0 = 1;}
		on led1on from SET to SET do {led1 = 1;}
		on led2on from SET to SET do {led2 = 1;}

		on led0off from SET to SET do {led0 = 0;}
		on led1off from SET to SET do {led1 = 0;}
		on led2off from SET to SET do {led2 = 0;}
	end

	// for Sensor, it will provide a random value as the return of sensors
	atom type Environment() 
		// data definition
		data int value
		data int state
		// port definition
		export port Port_tvv read(state, value)
		// state definition
		place DO
		// interaction definition
		initial to DO do {
			value = get_rand(10000);
			// 10% fail
			if (value > 9000) then
				state = DISABLE;
			else
				state = ENABLE;
			fi
		}
			
		on read from DO to DO do {
			value = get_rand(10000);
			// 10% fail
			if (value > 9000) then
				state = DISABLE;
			else
				state = ENABLE;
			fi
		}
	end	

	atom type Channel(int rate)

		data int is_channel_busy = UNDEFINED
		data int succ_rate
		
		export port Port_tv send(succ_rate)
		port Port_t done()
		
		place IDLE, BUSY

		initial to IDLE do { is_channel_busy = ENABLE; succ_rate = rate; }

		on send from IDLE to BUSY  provided (is_channel_busy == ENABLE) do { is_channel_busy = DISABLE; }

		on done from BUSY to IDLE provided (is_channel_busy == DISABLE) do { is_channel_busy = ENABLE; }
	
	end
		
	compound type SampleNode() 
		// components
		component NodeBoot tb()
    		component TaskScheduler ts(8888, 1)
		component EventScheduler es(8888)

		// component Timer timer1(111)
		component Sensor sen1(456)	
		component Timer timer1(6324, 3, 0)	
		component SampleApplication app1(1, 2, 2)

		component TaskHandler th_app1_1(), th_app1_2()
		component EventHandler eh_sen1_data_ready(), eh_timer()
		component CommandHandler ch_sen1_get_data(7777, 7777)

		component Environment env() 

		// System Boot
		connector Conn2 scheduler_init(
			tb.sched_init, 
			ts.init
		)
		connector Conn2 interrupt_init (
			tb.enable_interrupt, 
			es.init
		)
		// booted application
		connector Conn2 app_boot(
			tb.booted, 
			app1.booted
		)
	
		// connectors
		// post task
		connector Conn3_P post_task1(
			app1.post, 
			ts.post, 
			th_app1_1.init
		)
		connector Conn3_P post_task2(
			app1.post,
			ts.post, 
			th_app1_2.init
		)
		// the link of tasksched and its handler: begin
		connector Conn3 begin_task1(
			es.test, 
			th_app1_1.beg, 
			ts.beg
		)					
		connector Conn3 begin_task2(
			es.test,				
			th_app1_2.beg, 
			ts.beg
		)
	
		// the link of tasksched and its handler: finish
		connector Conn2_Finish fin_task1(
			th_app1_1.fin, 
			ts.fin
		)
		connector Conn2_Finish fin_task2(
			th_app1_2.fin, 
			ts.fin
		)	
		
		// the following is for test: meet the basic demanding
		connector Conn6_Preem test_pree1(
			es.pre, 
			th_app1_1.pre, 
			th_app1_2.pre, 
			ch_sen1_get_data.pre, 
			eh_sen1_data_ready.pre, 
			eh_timer.pre
		)
		
		connector Conn2 test_res1(
			es.res, 
			th_app1_1.res
		)
		connector Conn2 test_res2(
			es.res, 
			th_app1_2.res
		)
		connector Conn2 test_res3(
			es.res, 
			ch_sen1_get_data.res
		)
		connector Conn2 test_res4(
			es.res, 
			eh_sen1_data_ready.res
		)
		connector Conn2 test_res5(
			es.res, 
			eh_timer.res
		)

		// Command handler :TempRead.read() == SUCCESS
		connector Conn4_Sen_Begin sen_ch_beg(
			app1.sig, 
			ch_sen1_get_data.beg, 
			sen1.read, 
			env.read
		)	
		connector Conn2_V2  sen_repo(
			ch_sen1_get_data.fin, 
			sen1.test
		)
		
		// Sensor sig, it will sig anytime
		connector Conn4_S sig_event1(
			sen1.sig, 
			es.sig, 
			eh_sen1_data_ready.init, 
			ch_sen1_get_data.done
		)
		connector Conn2 begin_event1(
			eh_sen1_data_ready.beg, 
			es.beg
		)
		connector Conn2_Finish_1  fin_event1(
			eh_sen1_data_ready.fin, 
			es.fin
		)

		// Timer sig, it will sig when expired1, it will signal a Periodic
		connector Conn2 set_timer1(
			app1.sig, 
			timer1.post
		)
		connector Conn3_Timer_Sig sig_timer1(
			timer1.sig, 
			es.sig, 
			eh_timer.init
		)
		connector Conn2 beg_timer1(
			eh_timer.beg, 
			es.beg
		)
		connector Conn3 fin_timer1(
			eh_timer.fin, 
			es.fin, 
			timer1.interval
		)

		// extern connector 
		// make sure tick excute after ts and es is free
		connector Conn2_V2 ts_es_free(
			ts.tick, 
			es.test
		)
		priority ts_tick_minimal1 ts_es_free: * < * : * provided (es.is_es_idle == 0)
	end

	compound type BasicMACM (int appid)
		component NodeBoot tb()
    		component TaskScheduler ts(appid ,0) // debug: ts disabled
		component EventScheduler es(appid)
		component Timer timer1(6666, 1, 0) // debug: not use timer now
		component SampleApplication app1(appid, 0, 1) // noting to post and signal once
		component Sensor sen1(456)	
		component Environment env() 
		component LED led()

		// bussiness ch/eh/th
		// component EH_Timer eh_timer()
		component CH_Photo_Read ch_photo_read(1000, appid)
		component EH_Photo_ReadDone eh_photo_readdone(appid)
		component CH_DataMsg_Send ch_datamsg_send(1001, appid)
		component EH_DataMsg_SendDone eh_datamsg_senddone(appid)
		component EH_Recvmsg_Receive eh_recvmsg_receive(appid)
		
		// radio
		component RadioSender sender(0)
		component RadioReceiver receiver(0)

		// System Boot
		connector Conn2 scheduler_init(
			tb.sched_init, 
			ts.init
		)

		connector Conn2 interrupt_init (
			tb.enable_interrupt, 
			es.init
		)
		// boot application
		connector Conn2 app_boot(
			tb.booted, 
			app1.booted
		)

		connector Conn_Sen_Ch_Beg conn_sen_ch_beg(
			app1.sig, 
			ch_photo_read.beg,
			led.led1on,
			sen1.read, 
			env.read
		)	
		
		connector Conn_Sig_Photo_Read conn_sig_photo_read(
			sen1.sig, 
			es.sig,
			eh_photo_readdone.init,
			ch_photo_read.sig
		)

		connector Conn2 conn_eh_beg1(
			es.beg,
			eh_photo_readdone.beg
		)

		connector Conn2_M conn_photo_read_call(
			eh_photo_readdone.call_send,
			ch_datamsg_send.beg
		)
		
		connector Conn2_M conn_radio_send(
			ch_datamsg_send.send,
			sender.syn_send
		)

		// provided: if snd succeed
		connector Conn3_Radio_Senddone conn_radio_senddone(
			eh_photo_readdone.get_report,
			sender.test,
			ch_datamsg_send.sig
		)

		connector Conn3_Basic conn_photo_read_call2(
			es.fin,
			eh_photo_readdone.call_led2,
			led.led2on
		)
		
		connector Conn3_Datamsg_Senddone conn_datamsg_senddone(	
			eh_datamsg_senddone.init,
			sender.sig,
			es.sig
		) 

		connector Conn2 conn_eh_beg2(
			es.beg,
			eh_datamsg_senddone.beg
		)

		connector Conn3_Basic conn_datamsg_senddone_call(
			es.fin,
			eh_datamsg_senddone.call,
			led.led2off
		)

		// msg receiver todo
		connector Conn_Data_Receive conn_data_receive(
			es.sig,
			receiver.listen2,
			eh_recvmsg_receive.init
		)
		
		connector Conn2 conn_eh_beg3(
			es.beg,
			eh_recvmsg_receive.beg
		)

		connector Conn3_Basic conn_recv_eh(
			es.fin,
			eh_recvmsg_receive.call,
			led.led0on
		)

		// preem enable
		connector Conn6_Preem conn_pre(
			es.pre,
			ch_photo_read.pre,
			eh_photo_readdone.pre,
			ch_datamsg_send.pre,
			eh_datamsg_senddone.pre,
			eh_recvmsg_receive.pre
		)
		
		// resume
		connector Conn2 conn_res1(
			es.res,
			ch_photo_read.res
		)

		connector Conn2 conn_res2(
			es.res,
			eh_photo_readdone.res
		)

		connector Conn2 conn_res3(
			es.res,
			ch_datamsg_send.res
		)

		connector Conn2 conn_res4(
			es.res,
			eh_datamsg_senddone.res
		)
		
		connector Conn2 conn_res5(
			es.res,
			eh_recvmsg_receive.res
		)

		export port sender.broadcast as broadcast
		export port receiver.listen1 as listen	
	end
	
	compound type Compound()	
		// component SampleNode snode() 
		component BasicMACM node1(1111)
		component BasicMACM node2(2222)
		component Channel chan(80)	

		// node1 to node2
		connector Conn_CSMACA conn_csma_n1_n2 (
			node1.broadcast,
			chan.send,
			node2.listen
		)

		// node2 to node1
		connector Conn_CSMACA conn_csma_n2_n1 (
			node2.broadcast,
			chan.send,
			node1.listen
		)
		
	end
end